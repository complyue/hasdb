
export { # re-export these imports, so launcher scripts can be terse
  import * 'db'
  import * 'db/machinery'
  import * 'db/server'

  import * './schema'
}


export class DbApp {

  method __init__ (
    servAddr as this._servAddr = '127.0.0.1',
    servPort as this._servPort = 3721,
    conAddr as this._conAddr = '127.0.0.1',
    conPort as this._conPort = 3720,
  ) pass

  method __db_console_init__ () {
    # implant the db and app instance into the service entry module for
    # each connected console
    that.db = this.db
    that.app = this
  }

  method __db_client_init__ () {
    # implant the db and app instance into the service entry module for
    # each connected client
    that.db = this.db
    that.app = this

    # TODO implant application specific data query/update procedures
    # ...
  }

  # the effective `DataBack` instance for this app.
  #
  # will be assigned during `bootstrap()` method, which is called from the
  # effective `DataBack` instance, after this app instance is passed to
  # `runDbApp()`
  db := '<uninitialized>'

  # this method is called before existing back data from the disk file is
  # restored by replaying history, machinery necessary for history replay
  # needs to be setup by this method.
  method bootstrap() {
    # `DataBack` instance will put `this` App as its first super,
    # `run()` is called against the db instance, so `that` here is
    # the actual `DataBack` instance.
    this.db = that

    # import some schema - business classes, indices get created - from
    # some lib, with re-exporting
    export import * DbLib( db ) into this

    # define more business classes, create more top-level indices, etc.
    # ...
  }

  # this is the *main* method of the application, all transactional changes
  # are backed to disk file during the course of this method running.
  # once this method returns, the db is shutdown.
  method run() {

    # start the networked console
    case dbConsoleOn(
      this.__db_console_init__, # service module initializer
      this._conAddr, this._conPort, # network location to vend the console
    ) of { ncon } -> { export this.ncon = ncon }

    # start the db service
    case dbOn(
      this.__db_client_init__, # service module initializer
      this._servAddr, this._servPort, # network location to vend the service
    ) of { server } -> { export this.server = server }

    # run the stdio console in a separate thread
    go {
      console.info<| '''
 * You are in the DB app console now, issue shutdown to commit all changes.
 * Note that quiting the process (by Ctrl^D) from within the server, without
   shutting down first, will leave your changes uncommitted.
'''
      while server.eol() is false {
        case console.readCommand( ps1= "(dbs)Đ: ", ps2= "Đ| " ) of {
          shutdown -> {
            # shutdown the db app and commit its changes
            server.stop()
            console.print( 'DB shutdown issued.' )
          }
          batteries.quit -> {
            console.print( '''
 * You have left the db app console on stdio, only networked db app console
   is available for now.
 * You can only return to the db top-level repl after the app is shutdown,
   probably from a networked console.
            ''' )
            break
          }
          batteries.dir -> { # custom response to the builtin `dir` command
            printDir()
            # ...
          }
          { cmdVal } -> {
            console.print( cmdVal )
            cmdVal = nil # clear it
          }
        }
      } $=> { # catch exceptions

        { { IOError:exc } } -> {
          console.fatal <| 'IO error - ' ++ exc
          rethrow # escalate it to the program loop of the
          # host interpreter, let it decide what to do.
        }

        { cmdExc } -> {
          console.print( 'Recovered from error', exception=cmdExc )
        }

      }
    }

    {

      # the server can be shutdown asynchronously, either by stdio
      # console or networked console
      server.join()

    } @=> { # stop the network service anyway before db app shutdown

      console.info<| 'DB app shutting down ...'

      # stop accepting new network clients
      this.server.stop()
      this.ncon.stop()

      # TODO ask currently connected clients atm to finish up gracefully,
      #      and kick them after some timeout.

    }
  }
}
