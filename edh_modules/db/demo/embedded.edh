
export { # re-export these imports
  import * 'db'
  import * 'db/machinery'

  import * './schema'
}


export class DbApp {

  # the effective `DataBack` instance for this app.
  #
  # will be assigned during `bootstrap()` method, which is called from the
  # effective `DataBack` instance, after this app instance is passed to
  # `runDbApp()`
  db := '<uninitialized>'

  # this method is called before existing back data from the disk file is
  # restored by replaying history, machinery necessary for history replay
  # needs to be setup by this method.
  method bootstrap() {
    # `DataBack` instance will put `this` App as its first super,
    # `run()` is called against the db instance, so `that` here is
    # the actual `DataBack` instance.
    this.db = that

    # import some schema - business classes, indices get created - from
    # some lib
    import * DbLib( db ) into this

    # define more business classes, create more top-level indices, etc.
    # ...
  }

  # this is the *main* method of the application, all transactional changes
  # are backed to disk file during the course of this method running.
  # once this method returns, the db is shutdown.
  method run() {

    case db.deptByName[ 'Dev' ] of {
      { dev } -> { pass }

      console.print( 'Populating DB contents.' )

      dev = Depart( 'Dev' )

      compl = Person( name = 'Compl', age = 41 )
      jim = Person( name = 'Jim', age = 11 )

      WorkFor( compl, dev, 12345 )
      WorkFor( jim, dev, 54321 )

      db.syncData()
    }

    # define extra commands this app supports
    jims := Command()

    console.info<| '''
 * You are in the DB app console now, issue shutdown to commit all changes.
 * Note that quiting the process (by Ctrl^D) from within the server, without
   shutting down first, will leave your changes uncommitted.
'''
    while true {
      case console.readCommand( ps1= "(app)Đ: ", ps2= "Đ| " ) of {
        shutdown -> { break }
        batteries.quit -> { # the builtin `quit` command
          console.print(
            "You don't quit a db app console, use `shutdown` instead." )
        }
        batteries.dir -> { # custom response to the builtin `dir` command

          case db.personByName[ 'Compl' ] of { compl=>_ } -> {
            console.print( "Compl's record is: " ++ compl )
          }
          case db.personByName[ 'Jim' ] of { jim=>_ } -> {
            console.print( "Got a Jim ver# " ++ ( jim.version $=> 'legacy' ) )
          }
          console.print( 'Dev Org is ' ++ dev ++ ' with workers:' )
          for ( ixk, workRel ) from dev.workers.range() do
          console.print( '  ' ++ workRel.person ++ ' in order of ' ++ ixk )

        }
        jims -> {
          console.print( 'Got these versions of Jim:' )
          for jim from db.personByName[ 'Jim' ] do console.print(
            ' # ' ++ ( jim.version $=> 'legacy' ) )
        }
        { cmdVal } -> {
          console.print( cmdVal )
          cmdVal = nil # clear it
        }
      }
    } $=> { # catch exceptions

      { { IOError:exc } } -> {
        console.fatal <| 'IO error - ' ++ exc
        rethrow # escalate it to the program loop of the
        # host interpreter, let it decide what to do.
      }

      { cmdExc } -> {
        console.print( 'Recovered from error', exception=cmdExc )
      }

    }

    console.print( 'DB app shutting down ...' )

  }
}
