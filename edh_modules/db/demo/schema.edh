
import * 'db'
import * 'db/machinery'


# as `import` in Edh can have an object as the source, some object can
# serve as a parameteric *module*, with nested classes, methods and/or
# other procedures, those to be `import`ed into another app/lib
# instance's scope.

export class DbLib {

  # requires an effective `DataBack` instance for each instance of this lib
  method __init__ (db as this.db) {

    # create top-level indices wrt all business object classes provided by
    # this lib
    db.createIndex( expr deptByName, Depart, expr (
      name:ASC,
    ), unique=true )
    db.createIndex( expr personByName, Person, expr name:ASC )

  }

  # a business object class, should `extends db.superBack()` from its 
  # `__init__()` method, for the business object instances of this class
  # to be persisted by the effective `DataBack`.
  #
  # although technically allowed, don't do it in the class procedure,
  # that'll confuse `DataBack` when instances are restored by history
  # replay, in which case a business object instance is created by
  # non-standard construction with a `SuperBack` automatically added as
  # a super.
  #
  # IMPL. DETAILS:
  # during history replay, when persistent objects are restored from
  # the backing storage, an instance under goes a non-standard
  # construction, the `__init__()` method will NOT be called as in
  # normal construction after the class procedure is called against
  # the new instance. so as `extends db.superBack()` carries the
  # persistent-object-creation semantic, it should be written in 
  # the `__init__()` method instead of in the class procedure.

  {#
   # An entity business class
   #}
  export class Person {

    method __init__(
      name as this.name, 
      age as this.age, 
    ) extends db.superBack()

    # invoked on initial creation of this persistent business object, or 
    # during history replay from backing storage.
    method __db_init__ () {

      # create a kin set for all departs this person works for
      super.createKinSet(
        # target attr name, will be available as super attr
        expr depts,
        # business class for the relationship
        WorkFor,
        # attr key on the relationship class, whose value is a reference to
        # this business object
        expr person,
      )

    }

    {# this is somewhat similar to a stored procedure in relational DBMS,
     # only more efficient under graph traversal usages.
     #
     # all node objects are always in memory, given sufficient physical
     # RAM deployed for the graph data. they are inter-connected by 
     # vanilla reference from a relationship object to its referees, or
     # by kin index/set from a referee to its referers.
     #
     # transactional semantics are easily marked with `ai` keyword for
     # proper boundaries. e.g. this method is ai enclosed, it's guaranteed
     # to summarize a consistent collection of 'WorkFor' relationship data.
     #
     # it can naturally be nested inside bigger ai marked blocks for bigger
     # transactions if that's appropriate.
     # 
     # and STM will automatically atomically retry this procedure as part of
     # an inconsistent attempt of a transaction, until the whole transaction
     # is finally processed in a consistent manner.
     #}
    method income () ai {
      cumSalary = 0
      for workFor from super.depts.all() do {
        cumSalary += workFor.salary
      }
      return cumSalary
    }

    method __repr__ () {
      'Person(name=' ++ this.name ++ ', age=' ++ this.age ++ ')'
    }

  }

  {#
   # An entity business class
   #}
  export class Depart {

    method __init__(
      name as this.name,
    ) extends db.superBack()

    # invoked on initial creation of this persistent business object, or 
    # during history replay from backing storage.
    method __db_init__ () {

      # create a kin index for persons working for this dept, sorted by salary
      super.createKinIndex(
        # target attr name, will be available as super attr
        expr workers,
        # business class for the relationship
        WorkFor,
        # attr key on the relationship class, whose value is a reference to
        # this business object
        expr depart,
        # sorting key attrs, descending sort by salary
        expr ( salary:DESC, ),
      )

    }

    method headcount () ai {
      hc = 0
      for workFor from super.workers.all() do
        hc += 1
      return hc
    }

    method expenses () ai {
      amt = 0
      for workFor from super.workers.all() do 
        amt += workFor.salary
      return amt
    }

    method __repr__ () {
      'Depart(name=' ++ this.name ++ ')'
    }

  }

  {#
   # A relationship business class
   #}
  export class WorkFor { method __init__(
    person as this.person,
    depart as this.depart,
    salary as this.salary,
  ) extends db.superBack() }

}

