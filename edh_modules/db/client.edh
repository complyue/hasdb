
import * 'net'
import (
  DbArray,
  **_  # consume (drop) extra artifacts exported there, don't fail
) 'db/RT'


export class DbClient {

  _peer = sink

  method __init__ (
    dataDir   as this.dataDir,
    addr      ='127.0.0.1', # db server addr to connect
    port      =3721,        # db server port to connect
    consumer  ='db/client',   # the peer module
  ) {
    case Client(
      consumer,
      addr, port,
      init=this.__peer_init__,
    ) of { clnt } -> {
      go {  # clear the peer anyway after network disconnected
        clnt.join() $=> this._peer <- nil
      }
      # addrs() waits until the connection is make or failed
      case clnt.addrs() of { addrs } ->
        console.info<| 'Connected to DB via: ' ++ addrs
      # to inherit eol()/join()/stop() etc.
      extends clnt
    }
  }

  method __peer_init__() {
    this._peer <- that.peer
    that.db = this
  }

  # this waits until the peer is initialized then return it
  method peer() latestEvent(this._peer)

  # this makes `db.Array(...)` eval right at the client site
  method Array (***apk) {
    DbArray( this.dataDir, ***apk )
  }

}
