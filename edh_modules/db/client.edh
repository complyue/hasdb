
import * 'net'

export import * 'dim'

import (
  DbArray,
  **_ # consume (drop) extra artifacts exported there, don't fail
) 'db/RT'


export class DbClient {

  client :: Client

  property$
  method client () None

  _peer = sink

  method __init__ (
    dataDir as this.dataDir,
    addr = '127.0.0.1', # db server addr to connect
    port = 3721, # db server port to connect
    consumer = 'db/client', # the peer module
  ) {
    case Client(
      consumer,
      addr, port,
      init=this.__peer_init__,
    ) of { clnt } -> {

      property$ method client () clnt

      go { # clear the peer anyway after network disconnected
        clnt.join() @=> this._peer <- None
      }

      # addrs() waits until the connection is made or failed
      case clnt.addrs() of {
        { addr => _ } -> console.info<| 'Connected to DB via: ' ++ addr
        clnt.join() # connection has failed, propagate the error
        # in case clnt.join() didn't throw, though unlikely
        error( 'Can not connect to db.' )
      }

    }
  }

  # Client and other host classes from `net` are not extensible atm,
  # delegate these useful method for the time being
  method eol () this.client.eol()
  method join () this.client.join()
  method stop () this.client.stop()


  method __peer_init__() {
    that.db = this
  }

  # this waits until the peer is initialized then return it
  method peer() latestEvent( this._peer )

  # this makes `db.Array(...)` eval right at the client site
  method Array (*** apk ) {
    DbArray( this.dataDir, ***apk )
  }

}
