
method hasReConRepr (attrVal) {
 return type(attrVal) ?<= [
    # types reconstructable from its textual representation
    nil,  # absent attribute
    BoolType, DecimalType, StringType,  # literal values
    # TODO validate deep content in a container are reconstructable from repr
    PairType, TupleType, ListType, DictType,  # containers
    ArgsPackType,  # complexer container
  ]
}

class DataBack (persistSink) {

  _last_eid = 0  # last entity identifier

  method superBack () {
    SuperBack(this, this._last_eid += 1)
  }

  # settle a new business object
  # in a tx process all attributes atm
  method _settle_obj( boEnt, sbEnt ) ai {
    persistAttrs = []
    for (attrKey, attrVal) from sbEnt.boScope.attrs() do case attrVal of {
      # referencing another business object, settle the relationship
      {{ SuperBack: sbRefEnt }} ->  {
        this._settle_rel( boEnt, sbEnt, attrKey, attrVal, sbRefEnt )

        # encounter the new relationship
        (attrKey, constructor(attrVal), sbRefEnt.eid) => persistAttrs
      }

      # handle trivially representable values, including `nil`
      ;| hasReConRepr(attrVal) -> {
        # encounter the new attribute value
        (attrKey, attrVal) => persistAttrs
      }

      # not to persist, treating as a transient attribute
      runtime.debug<| 'attribute of type ' ++ type(attrVal)
        ++ ' treated as transient attribute ' ++ attrKey 
        ++ ' for business object ' ++ sbEnt.eid
        ++ ' of class defined at ' ++ sbEnt.boScope.lexiLoc()
    }

    # persist all attributes of the new business object
    db.persistSink <- (constructor(boEnt), sbEnt.eid, persistAttrs)
  }

  # settle an attribute update
  method _settle_attr( boEnt, sbEnt, attrKey, attrVal ) case attrVal of {
    # referencing another business object, settle the relationship
    {{ SuperBack: sbRefEnt }} ->  {
      this._settle_rel( boEnt, sbEnt, attrKey, attrVal, sbRefEnt )

      # persist the new relationship
      db.persistSink <- (constructor(boEnt), sbEnt.eid, [
        (attrKey, constructor(attrVal), sbRefEnt.eid)
      ])
    }

    # handle trivially representable values, including `nil`
    ;| hasReConRepr(attrVal) -> {
      # persist the new attribute value
      db.persistSink <- (constructor(boEnt), sbEnt.eid, [
        (attrKey, attrVal)
      ])
    }

    # not to persist, treating as a transient attribute
    runtime.debug<| 'attribute of type ' ++ type(attrVal)
      ++ ' treated as transient attribute ' ++ attrKey 
      ++ ' for business object ' ++ sbEnt.eid
      ++ ' of class defined at ' ++ sbEnt.boScope.lexiLoc()
  }

  # settle a new relationship
  method _settle_rel( boRel, sbRel, refAttr, boEnt, sbEnt ) {
    # counted reverse reference key, a pair of <rel-class>:<ref-attr>
    kinKey = constructor(boRel):refAttr

    # in a tx update the reverse reference for this very relationship
    ai case sbEnt.kins[kinKey] of {
      nil -> sbEnt.kins[kinKey] = {
        boRel: 1
      }
      { kinRCs } -> kinRCs[boRel] = case kinRCs[boRel] of {
        nil -> 1
        { rc } -> error('bug: dup reverse ref')
      }
    }
  }

  # cleanup an old relationship
  method _cleanup_rel( boRel, sbRel, refAttr, boEntOld, sbEntOld ) {
    # counted reverse reference key, a pair of <rel-class>:<ref-attr>
    kinKey = constructor(boRel):refAttr

    # update the reverse reference for this very relationship
    kinRCs = sbEnt.kins[kinKey]
    # the assignment has an implicit tx which is just enough
    kinRCs[boRel] = case kinRCs[boRel] of {
      1 -> nil  # assigning to nil just deletes the entry
      { rc } -> error('bug: reverse ref lost')
    }
  }

  method restore (restoreSessions) {
    for (rsid, dataIntake, sessionDoneSig) from restoreSessions do {
      go {
        defer {  # signal session done on thread term
          sessionDoneSig <- rsid
        }
        for txChgs from dataIntake do {
          for txChg from txChgs do case txChg of {
            nil -> break  # end-of-session
            { (boClass, eid, attrChgs) } -> case attrChgs of {
              ai case this._extent[boClass] of {
                nil -> this._extent[boClass] = ( bocExtent = {,} )
                { bocExtent } -> { pass }
              }

              # delete
              nil -> {
                # TODO disconnect all relationships

                # unref the business object from db
                bocExtent[eid] = nil
              }

              ai if eid > this._last_eid then this._last_eid = eid

              # creation
              {{ SuperBack: sb }} -> {
                sb.eid != eid -> error 'bo eid from data intake mismatch, ' ++ sb.eid
                  ++ ' vs ' ++ eid
                # TODO connect all relationships

                # ref the business object from db
                bocExtent[eid] = attrChgs
              }

              # update
              case bocExtent[eid] of {
                nil -> runtime.error<| 'business object of class ' ++ boClass 
                  ++ ' lost, with eid ' ++ eid
                { bo } -> case bo of {{ SuperBack: sb }} -> {
                  for (attrKey, attrVal) from attrChgs do case attrVal of {
                    attrValOld = bo?$attrKey
                    # TODO disconnect old relationship as necessary

                    # TODO putAttr yet to be impl.
                    {( refClass: refEid )} -> {
                      # todo more friendly error msg if class/eid not found
                      boTarget = this._extent[refClass][refEid]
                      case boTarget of {{ SuperBack: sbTarget }} -> {
                        # connect the relationship
                        ai case sbTarget.kins[constructor(bo)] of {
                          nil -> {
                            sbTarget.kins[constructor(bo)] = {
                              sb.eid: (1: bo)
                            }
                          }
                          { kinCntr } -> {
                            kinCntr[sb.eid] = case kinCntr[sb.eid] of {
                              nil -> (1: bo)
                              {( rc: _bo )} -> (rc+1: bo)
                            }
                          }
                        }
                        # ref from the bo
                        sb.boScope.putAttr (attrKey, boTarget)
                      }
                    }
                    sb.boScope.putAttr (attrKey, attrVal)
                  }
                }
              }

            }
          }
        }
      }
    }
  }

}

class SuperBack (db, eid) {

  # reverse references from here, to referencers of `that` business object,
  # keyed by a pair of <rel-class>:<ref-attr>
  _kins = {,}

  generator kins(refClass, refAttr) {
    for (boRef, _) from this._kins[refClass:refAttr] do
      yield boRef
  }

  # handles `extends db.superBack()` from a business object's class proc
  method (<-^) (boScope) {
    this?boScope &> error (
      'bug: more than 1 business objects per SuperBack instance'
    )
    this.boScope = boScope

    # settle new object
    db._settle_obj( that, this )
  }

  # ( <-@) handles `this.xxx = yyy` from a business child (referred to by `that`)
  # (*<-@) handles `obj.xxx = yyy` for `obj` being a business child (referred to by `that`)

  method (*<-@) (attrKey, attrVal) {
    attrValOld = that?$attrKey

    # no value change, nop
    attrValOld == attrVal -> { pass }

    # apply the attribute update
    that?$attrKey = attrVal

    # cleanup the old relationship
    case attrValOld of {{ SuperBack: sbRefEntOld }} ->
      db._cleanup_rel( that, this, attrKey, attrValOld, sbRefEntOld)

    # settle new attribute
    db._settle_attr( that, this, attrKey, attrVal )
  }

  # use same method impl. for (<-@) and (*<-@), treating internal/external attr
  # updates the same
  this.(<-@) = (*<-@)

  # TODO impl.
  method delete() {
    runtime.fatal<| 'deletion of backed business object not impl. yet'
  }

}

