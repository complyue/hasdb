
{#
 # hasdb client
 #
 # this is the server-facing entry module for client of hasdb
 #}

import (Peer, **_) 'net/RT'
import * 'net/symbols'
effect import * 'net/effects'

import (Dbclient, **_) 'db/client'


# a Peer object should have been implanted atomically, the following
# line should have no practical effect but to hint an IDE for code
# completion etc.
peer ?:= Peer()
console.debug<| 'Consuming DB service via: ' ++ peer

# define various effectful artifacts used for communication with this
# connected consumer client session, with `@netPeer` and `@dataSink` the
# minimum by convention
#
# note in assignments to symbolic attributes, semicolon before `@` is likely
# needed or the `@` may be parsed as an operator
effect {
  ;@netPeer = peer
  ;@dataSink = peer.armChannel(dataChan)
}

# channel 0 is named `conin` by convention, commands through it are
# interpreted as command prompt change requests from the connected
# service for this consumer client
perceive peer.armChannel( conin := 0 ) {
  # TODO support cmd prompt change request ?
}

# channel 1 is named `conout` by convention, commands through it are
# directed to `console.print()`
perceive peer.armChannel( conout := 1 ) { conOut } -> {
  ;| ArgsPackType == type(conOut) -> {
    console.print( ***conOut )
  }
  console.print( conOut )
}

# channel 2 is named `conmsg` by convention, commands through it are
# directed to logging at `info` level
perceive peer.armChannel( conmsg := 2 ) { conMsg } -> {
  console.info<| conMsg
}

# channel 'err' is named `errChan` by convention, errors occurred on
# one site are passed to its peer through this channel
perceive peer.armChannel( errChan ?:= 'err' ) {
  {{ PeerError: peerErr }} -> { throw peerErr }
  { peerErrMsg } -> { throw PeerError( peerErrMsg ) }
}


# the DbClient instance named `db` should have been implanted into this module,
# by per-connection peer module initialization method.
db ?:= DbClient()
# make the peer object available from dbc, but only after some preliminary
# channels have been armed 
db._peer <- peer


{

  while false == peer.eol() {
    case peer.readCommand() of {
      { cmdVal } -> {
        console.info<| 'Unexpected peer command from DB service via: '
          ++ peer ++ '\n  ' ++ cmdVal
      }
      # note a command resulting in nil is normal, just pass by here
    }
  }

} @=> {
  { dbcExc } -> {
    console.warn<| 'Error with DB service via: ' ++ peer ++ ' ' ++ dbcExc
    fallthrough
  }

  peer.armedChannel(dataChan) <- nil
  peer.armedChannel(0) <- nil
  peer.armedChannel(1) <- nil
  peer.armedChannel(2) <- nil

  console.info<| 'Done with DB service via: ' ++ peer
}
