
import * 'db'


{

  # a class in Edh can serve as a parameteric *module*, with nested classes,
  # methods and/or other procedures, those to be `import`ed into another app/lib
  # instance's scope.
  class DbLib {

    # an `__init__()` method if defined manifests the arguments to construct
    # instances of the enclosing class (procedure)
    #
    # requires an effective `DataBack` instance for each instance of this lib
    method __init__ (db as this.db) pass

    class Entity01 {

      method __init__ () {

        # don't do the `extends` in the class procedure, that'll confuse 
        # DataBack when instances are restored by history replay, in which
        # case a `SuperBack` is added as a super, automatically.
        extends db.superBack()
      }

    }

  }

}


{

  class DbApp {

    # the effective `DataBack` instance for this app.
    #
    # will be assigned during `bootstrap()` method, which is called from the
    # effective `DataBack` instance, after this app instance is passed to
    # `runDbApp()`
    db = nil

    # a business object class, should `extends db.superBack()` from its 
    # `__init__()` method, for the business object instances of it to be
    # persisted by the effective `DataBack`.
    #
    # NOTE during history replay, when persistent objects are restored from
    #      the backing storage, the `__init__()` method will NOT be called
    #      as in normal cases after the class procedure is called against
    #      the new instance. so as `extends db.superBack()` carries the
    #      persistent-object-creation semantic, it should be written in 
    #      the `__init__()` method instead of in the class procedure.
    class Entity11 {

      method __init__ (name as this.name) {
        this.value = 555

        extends db.superBack()
      }

    }

    # this method is called before existing back data from the disk file is
    # restored by replaying history, machinery necessary for history replay
    # needs to be setup by this method.
    method bootstrap() {
      # `DataBack` instance will put `this` App as its first super,
      # `run()` is called against the db instance, so `that` here is
      # the actual `DataBack` instance.
      this.db = that

      # import some classes from a lib parameterized with current db instance.
      import * DbLib(that)
    }

    # this is the *main* method of the application, all transactional changes
    # are backed to disk file during the course of this method running.
    # once this method returns, the db is shutdown.
    method run() {

      e01 = Entity01()
      e01.name = 'Compl'
      e01.age = 41

      e11 = Entity11('Yue')
      e11.key = 'hahah'

    }
  }

}

runDbApp( 'data', DbApp() )
