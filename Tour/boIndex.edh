
import * 'db'

import (BoIndex, BoSet, **_) 'db/ehi'


{
  class BO { method __init__ (
    a as this.a, b as this.b, c as this.c,
  ) pass }

  bo1 = BO(1,2,3)
  bo2 = BO(3,2,1)
  bo3 = BO(1,2,3)
}


bos = BoSet()

bos.(<-)(bo1)
bos.(<-)(bo2)
bos.(<-)(bo3)

bos.(^*)(bo2)

for bo from bos.all() do console.info <| 'got bo in set: ' ++ bo


{
  # this form more concise to write by hand
  uoi = BoIndex(expr (
    a, b:DESC, c:ASC,
  ), unique=true)
}
uoi.unique
uoi.spec
uoi.keys

{
  indexSpec = [ # this list to be generated from cfg etc.
    'a', 'b':false, ('c', true),
  ]
  # this form more concise to write programmatically
  noi = BoIndex(indexSpec, unique=false)
}
noi.unique
noi.spec
noi.keys


uoi.(<-)(bo1)
uoi.(<-)(bo2)
# should fall as violating unique constraint
uoi.(<-)(bo3)

noi.(<-)(bo1)
noi.(<-)(bo2)
noi.(<-)(bo3)


uoi[1,2,3]

noi[1,2,3]


for (ik, bo) from uoi.range() do console.info<| 'unique one: ' ++ ik ++ ' - ' ++ bo

for (ik, bo) from noi.range() do console.info<| 'non-unique one: ' ++ ik ++ ' - ' ++ bo

for (ik, bos) from noi.groups() do console.info<| 'group ' ++ ik ++ ' - ' ++ bos

